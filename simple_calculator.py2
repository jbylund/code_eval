#!/usr/bin/python
from sys import argv
import re

class expression:
  def __init__(self,iexpr):
    self.iexpr = iexpr

  def evaluate(self):
    while(self.iexpr.count("(") > 0):
      first_close = self.iexpr.index(")")
      sub_expr_open = self.iexpr.rindex("(",0,first_close)
      sub_expression = expression(self.iexpr[sub_expr_open+1:first_close])
      self.iexpr = self.iexpr[:sub_expr_open] + str(sub_expression.evaluate()) + self.iexpr[first_close+1:]
    answer = 0
    isum = 0
    for sumpiece in self.iexpr.split("+"):
      idiff = None
      diffpieces = sumpiece.split("-")
      for i in xrange(len(diffpieces)):
        diffpiece = diffpieces[i]
        if 0 == len(diffpiece):
          diffpieces[i+1] = '-' + diffpieces[i+1]
          continue
        iprod = 1
        for mulpiece in diffpiece.split("*"):
          idiv = None
          for divpiece in mulpiece.split("/"):
            iexp = None
            for exppiece in divpiece.split("^"):
              exppiece = re.sub(neg_to_minus,'-',exppiece)
              if(None != iexp):
                iexp = iexp**float(exppiece.strip())
              else:
                iexp = float(exppiece.strip())
              pass
            if (None != idiv):
              idiv /= iexp
            else:
              idiv = iexp
          iprod *= idiv
        if(None != idiff):
          idiff -= iprod
        else:
          idiff = iprod
      isum += idiff
    return isum

exp_to_doublestar = re.compile('\^')
unary_minus = re.compile('([^\d\)])-')
neg_to_minus = re.compile('neg')
strip_spaces = re.compile(' +')
test_cases = open(argv[1], 'r')
for test in test_cases:
  test = test.rstrip()
  if(0 == len(test)):
    continue
  test = re.sub(strip_spaces,"",test)
  exp = expression(re.sub(unary_minus, '\g<1>neg', test))
  print str(round(exp.evaluate(),5)).rstrip("0").rstrip(".")
test_cases.close()
